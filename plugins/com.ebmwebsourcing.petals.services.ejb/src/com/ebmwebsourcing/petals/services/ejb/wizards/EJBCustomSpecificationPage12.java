/****************************************************************************
 *
 * Copyright (c) 2008-2011, EBM WebSourcing
 *
 * This source code is available under agreement available at
 * http://www.petalslink.com/legal/licenses/petals-studio
 *
 * You should have received a copy of the agreement along with this program.
 * If not, write to EBM WebSourcing (4, rue Amelie - 31200 Toulouse, France).
 *
 *****************************************************************************/

package com.ebmwebsourcing.petals.services.ejb.wizards;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.List;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

import javax.xml.namespace.QName;

import org.eclipse.jface.dialogs.IDialogSettings;
import org.eclipse.jface.dialogs.IMessageProvider;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.jface.window.Window;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.dialogs.ElementListSelectionDialog;

import com.ebmwebsourcing.petals.common.internal.provisional.ui.AbstractWizardListener;
import com.ebmwebsourcing.petals.common.internal.provisional.ui.FileList;
import com.ebmwebsourcing.petals.common.internal.provisional.utils.StringUtils;
import com.ebmwebsourcing.petals.services.ejb.Messages;
import com.ebmwebsourcing.petals.services.su.extensions.SuWizardSettings;
import com.ebmwebsourcing.petals.services.su.wizards.pages.AbstractSuPage;
import com.sun.java.xml.ns.jbi.JbiPackage;

/**
 * Located after the VERSION page.
 * @author Vincent Zurczak - EBM WebSourcing
 */
public class EJBCustomSpecificationPage12 extends AbstractSuPage {

	private FileList ejbFiles;
	private FileList jeeFiles;
	private String className;
	protected String wsdlName;


	/*
	 * (non-Javadoc)
	 * @see com.ebmwebsourcing.petals.tools.eclipse.su.main.pages.XsdBasedAbstractSuPage
	 * #dialogChanged()
	 */
	@Override
	public boolean validate() {

		// Validate the class
		String error = null;
		if( StringUtils.isEmpty( this.className )) {
			error = "You have to define the name of the EJB's remote interface.";
		} else if( StringUtils.isEmpty( this.wsdlName )) {
			error = "You have to give a name to the WSDL that will be generated.";
		} else if( ! this.wsdlName.endsWith( ".wsdl" )) {
			error = "The WSDL name must end with the '.wsdl' extension.";
		}

		// Fill-in the next page...
		if( error == null ) {
			String simpleName = getSimpleClassName( this.className );
			
			// CXF will take whatever value we put
			// These values are the ones generated by Java to EasyWSDL
			String[] parts = this.className.split( "\\." );
			StringBuilder ns = new StringBuilder( "http://" );
			if( parts.length > 1 ) {
				for( int i=parts.length-2; i>0; i-- )
					ns.append( parts[ i ] + "." );
				ns.append( parts[ 0 ]);
			}
			// CXF 2.2.x also adds a "/" at the end of the name space
			// We assume it is the general behavior of CXF
			ns.append( "/" );
			
			String namespace = ns.toString();
			getNewlyCreatedEndpoint().eSet(JbiPackage.Literals.ABSTRACT_ENDPOINT__ENDPOINT_NAME, simpleName + "Port");
			getNewlyCreatedEndpoint().eSet(JbiPackage.Literals.ABSTRACT_ENDPOINT__SERVICE_NAME, new QName(namespace, simpleName));
			getNewlyCreatedEndpoint().eSet(JbiPackage.Literals.ABSTRACT_ENDPOINT__INTERFACE_NAME, new QName(namespace, simpleName + "PortType"));
		}

		setPageComplete( error == null );
		return error == null;
	}


	/**
	 * @param qualifiedName
	 * @return
	 */
	private String getSimpleClassName( String qualifiedClassName ) {
		String[] parts = qualifiedClassName.split( "\\." );
		return parts[ parts.length - 1 ];
	}


	/*
	 * (non-Javadoc)
	 * @see org.eclipse.jface.dialogs.IDialogPage
	 * #createControl(org.eclipse.swt.widgets.Composite)
	 */
	public void createControl( Composite parent ) {

		// Create the composite container and define its layout.
		final Composite container = new Composite( parent, SWT.NONE );

		GridLayout layout = new GridLayout ();
		layout.marginLeft = layout.marginRight = 5;
		container.setLayout( layout );
		container.setLayoutData( new GridData( GridData.FILL_BOTH ));


		// Business Libraries
		this.ejbFiles = new FileList( null, container, Messages.ejbLibsText );
		this.ejbFiles.setFilterNames( new String[] { "Jar (*.jar)" });
		this.ejbFiles.setFilterExtensions( new String[] { "*.jar" });
		this.ejbFiles.addListener( new AbstractWizardListener () {
			public void valueHasChanged() {
				getWizard().setEJBFiles(ejbFiles.getFilePaths(false));
				validate();
			}
		});

		// Server Libraries
		this.jeeFiles = new FileList( null, container, Messages.serverLibsText );
		this.jeeFiles.setFilterNames( new String[] { "Jar (*.jar)" });
		this.jeeFiles.setFilterExtensions( new String[] { "*.jar" });
		this.jeeFiles.addListener( new AbstractWizardListener () {
			public void valueHasChanged() {
				getWizard().setJEEFiles(jeeFiles.getFilePaths(false));
				validate();
			}
		});



		// Class browser
		Composite subC = new Composite( container, SWT.NONE );
		subC.setLayoutData( new GridData( GridData.FILL_HORIZONTAL ));
		layout = new GridLayout( 3, false );
		layout.marginHeight = layout.marginWidth = 0;
		layout.marginTop = 10;
		subC.setLayout( layout );

		new Label( subC, SWT.NONE ).setText( "EJB's Remote Interface:" );
		final Text classText = new Text( subC, SWT.SINGLE | SWT.BORDER );
		classText.setLayoutData( new GridData( GridData.FILL_HORIZONTAL ));

		Button browseButton = new Button( subC, SWT.PUSH );
		browseButton.setText( "Browse..." );
		browseButton.addSelectionListener( new SelectionAdapter() {
			@Override
			public void widgetSelected( SelectionEvent e ) {
				String cName = openClassSelectionDialog();
				if( cName != null ) {
					classText.setText( cName );
					classText.setSelection( cName.length());
				}
			}
		});


		// The WSDL name
		new Label( subC, SWT.NONE ).setText( "WSDL File Name:" );
		final Text wsdlText = new Text( subC, SWT.SINGLE | SWT.BORDER );
		GridData layoutData = new GridData( GridData.FILL_HORIZONTAL );
		layoutData.horizontalSpan = 2;
		wsdlText.setLayoutData( layoutData );
		wsdlText.addModifyListener( new ModifyListener() {
			public void modifyText( ModifyEvent e ) {
				EJBCustomSpecificationPage12.this.wsdlName = wsdlText.getText().trim();
				getWizard().setWsdlName(wsdlText.getText().trim());
				validate();
			}
		});

		classText.addModifyListener( new ModifyListener() {
			public void modifyText( ModifyEvent e ) {
				EJBCustomSpecificationPage12.this.className = classText.getText().trim();
				String newWsdlName = getSimpleClassName( EJBCustomSpecificationPage12.this.className ) + ".wsdl";
				wsdlText.setText( newWsdlName );
				wsdlText.setSelection( newWsdlName.length());
			}
		});


		// Complete the page
		validate();
		String msg = getErrorMessage();
		if( msg != null ) {
			setErrorMessage( null );
			setMessage( msg, IMessageProvider.INFORMATION );
		}

		setControl( container );
	}

	/**
	 * Opens a dialog to select a class contained in the JAR files.
	 * @return the selected class name, or null if CANCEL was clicked
	 */
	private String openClassSelectionDialog() {

		// Get all the classes in the JAR
		List<String> classNames = new ArrayList<String> ();
		List<String> allLibs = new ArrayList<String>();
		allLibs.addAll(Arrays.asList(this.ejbFiles.getFilePaths(false)));
		for( String path : allLibs ) {
			JarFile jarFile;
			try {
				jarFile = new JarFile( path );

			} catch( IOException e ) {
				continue;
			}

			Enumeration<JarEntry> entries = jarFile.entries();
			while( entries.hasMoreElements()) {
				String entryName = entries.nextElement().getName();
				if( entryName.endsWith( ".class" )
							&& ! entryName.contains( "$" )) {
					entryName = entryName.substring( 0, entryName.length() - 6 );
					entryName = entryName.replaceAll( "/", "." );
					classNames.add( entryName );
				}
			}
		}

		// Display them in a dialog
		ElementListSelectionDialog dlg =
					new ElementListSelectionDialog( getShell(), new LabelProvider());

		dlg.setTitle( "Class Selection" );
		dlg.setElements( classNames.toArray());
		dlg.setMessage( "Select the EJB's remote interface" );
		dlg.setFilter( this.className != null ? this.className : "*" );
		dlg.setAllowDuplicates( false );
		dlg.setIgnoreCase( false );
		dlg.setMultipleSelection( false );

		String result = null;
		if( dlg.open() == Window.OK )
			result = (String) dlg.getFirstResult();

		return result;
	}

	@Override
	public EjbWizard13 getWizard() {
		return (EjbWizard13)super.getWizard();
	}
}
