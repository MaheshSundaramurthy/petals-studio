package com.ebmwebsourcing.petals.services.sca.generated;

import com.ebmwebsourcing.petals.services.sca.configuration.beans.ScaWizardBean;

/****************************************************************************
 * 
 * Copyright (c) 2008-2011, EBM WebSourcing
 * 
 * This source code is available under agreement available at
 * http://www.petalslink.com/legal/licenses/petals-studio
 * 
 * You should have received a copy of the agreement along with this program.
 * If not, write to EBM WebSourcing (4, rue Amelie - 31200 Toulouse, France).
 * 
 *****************************************************************************/

/**
  * This class was generated by EMF JET. 
  * <b>DO NOT MODIFY IT!</b>
  * @author Adrien LOUIS - EBM WebSourcing 
  */
public class DefaultServiceInterface {

  protected static String nl;
  public static synchronized DefaultServiceInterface create(String lineSeparator)
  {
    nl = lineSeparator;
    DefaultServiceInterface result = new DefaultServiceInterface();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL + "" + NL + "import org.osoa.sca.annotations.Remotable;" + NL + "" + NL + "@Remotable" + NL + "public interface MainService {" + NL + "" + NL + "\t// TODO: add the service operations." + NL + "}";
  protected final String TEXT_3 = NL;

	 public String generate( Object argument )
  {
    final StringBuffer stringBuffer = new StringBuffer();
     ScaWizardBean bean = (ScaWizardBean) argument; 
    stringBuffer.append(TEXT_1);
    stringBuffer.append( bean.getPackageName() );
    stringBuffer.append(TEXT_2);
    stringBuffer.append(TEXT_3);
    return stringBuffer.toString();
  }
}