package com.ebmwebsourcing.petals.services.eip.generated;

import com.ebmwebsourcing.petals.services.su.wizards.generation.EclipseSuBean;
import com.ebmwebsourcing.petals.services.eip.EipConsumeDataBean;
import com.ebmwebsourcing.commons.jbi.internal.provisional.utils.JbiNameFormatter;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;

/****************************************************************************
 * 
 * Copyright (c) 2008-2011, EBM WebSourcing
 * 
 * This source code is available under agreement available at
 * http://www.petalslink.com/legal/licenses/petals-studio
 * 
 * You should have received a copy of the agreement along with this program.
 * If not, write to EBM WebSourcing (4, rue Amelie - 31200 Toulouse, France).
 * 
 *****************************************************************************/

/**
  * This class was generated by EMF JET. 
  * <b>DO NOT MODIFY IT!</b>
  * @author Vincent Zurczak - EBM WebSourcing 
  */
public class SuJbiXml {

  protected static String nl;
  public static synchronized SuJbiXml create(String lineSeparator)
  {
    nl = lineSeparator;
    SuJbiXml result = new SuJbiXml();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + NL + "<jbi:jbi version=\"1.0\" ";
  protected final String TEXT_2 = ">" + NL + "\t" + NL + "\t<jbi:services binding-component=\"";
  protected final String TEXT_3 = "\">" + NL + "\t\t<jbi:provides \t\t" + NL + "\t\t\tinterface-name=\"";
  protected final String TEXT_4 = "\"" + NL + "\t\t\tservice-name=\"";
  protected final String TEXT_5 = "\"" + NL + "\t\t\tendpoint-name=\"";
  protected final String TEXT_6 = "\">" + NL + "\t" + NL + "\t\t\t<!-- CDK specific elements -->";
  protected final String TEXT_7 = NL;
  protected final String TEXT_8 = NL + "\t\t" + NL + "\t\t\t<!-- Component specific elements -->\t";
  protected final String TEXT_9 = NL;
  protected final String TEXT_10 = NL + "\t\t</jbi:provides>";
  protected final String TEXT_11 = NL + "\t\t" + NL + "\t\t<!-- Consumed project ";
  protected final String TEXT_12 = " ";
  protected final String TEXT_13 = " -->" + NL + "\t\t<jbi:consumes" + NL + "\t\t\tinterface-name=\"";
  protected final String TEXT_14 = "\"";
  protected final String TEXT_15 = NL + "\t\t\tservice-name=\"";
  protected final String TEXT_16 = "\"";
  protected final String TEXT_17 = NL + "\t\t\tendpoint-name=\"";
  protected final String TEXT_18 = "\"";
  protected final String TEXT_19 = ">" + NL + "\t\t\t" + NL + "\t\t\t<!-- CDK specific fields for this consume -->" + NL + "\t\t\t<petalsCDK:operation xmlns:op=\"";
  protected final String TEXT_20 = "\">op:";
  protected final String TEXT_21 = "</petalsCDK:operation>" + NL + "\t\t\t<petalsCDK:mep>";
  protected final String TEXT_22 = "</petalsCDK:mep>" + NL + "\t\t</jbi:consumes>";
  protected final String TEXT_23 = NL + "\t</jbi:services>" + NL + "</jbi:jbi>";
  protected final String TEXT_24 = NL;

	 public String generate( Object argument )
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
/**
 * Copyright (c) 2008-2009, EBM WebSourcing
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 **/

     
	EclipseSuBean suBean = (EclipseSuBean) argument;

    stringBuffer.append(TEXT_1);
     
	for( Map.Entry<String, String> namespace : suBean.getComputedNamespaces().entrySet()) { 
		
    stringBuffer.append( "\n\txmlns:" + namespace.getKey() + "=\"" + namespace.getValue() + "\"" );
     
	}
	
    stringBuffer.append(TEXT_2);
    stringBuffer.append( suBean.isBc() );
    stringBuffer.append(TEXT_3);
    stringBuffer.append( (suBean.sameNsForInterfaceAndService() ? EclipseSuBean.GENERATED_NS : EclipseSuBean.INTERFACE_NS) + ":" + suBean.getInterfaceName() );
    stringBuffer.append(TEXT_4);
    stringBuffer.append( (suBean.sameNsForInterfaceAndService() ? EclipseSuBean.GENERATED_NS : EclipseSuBean.SERVICE_NS) + ":" + suBean.getServiceName() );
    stringBuffer.append(TEXT_5);
    stringBuffer.append( suBean.getEndpointName() );
    stringBuffer.append(TEXT_6);
    stringBuffer.append(TEXT_7);
    stringBuffer.append( suBean.getCdkElementsAsString() );
    stringBuffer.append(TEXT_8);
    stringBuffer.append(TEXT_9);
    stringBuffer.append( suBean.getSpecificsElementsAsString() );
    stringBuffer.append(TEXT_10);
    
		
		
		Object o = suBean.customObjects.get( "EipVersion22" );
		if( o != null ) {
			List<?> consumes = ( List<?> ) o;
			int cpt = 1;
			for( Object oo : consumes ) {
				EipConsumeDataBean consumeDataBean = (EipConsumeDataBean) oo;
				String interfaceNsUri = consumeDataBean.getInterfaceNamespace();
				String interfaceNsPrefix = "iConsumeNsPrefix";
				
				String serviceNsUri = consumeDataBean.getServiceNamespace();
				String serviceNsPrefix = "consumeNsPrefix";
				boolean oneGeneratedNsOnly = interfaceNsUri != null && interfaceNsUri.equals( serviceNsUri );
								
				List<String> nsDeclarations = new ArrayList<String> ();			
				if( oneGeneratedNsOnly && interfaceNsUri != null ) {
					serviceNsPrefix = interfaceNsPrefix;
					String nsDecl = "xmlns:" + interfaceNsPrefix + "=\"" + interfaceNsUri + "\"";
					nsDeclarations.add( nsDecl );
				}
				else {
					String nsDecl = "xmlns:" + interfaceNsPrefix + "=\"" + interfaceNsUri + "\"";
					if( interfaceNsUri != null )
						nsDeclarations.add( nsDecl );
						
					nsDecl = "xmlns:" + serviceNsPrefix + "=\"" + serviceNsUri + "\"";
					if( serviceNsUri != null )
						nsDeclarations.add( nsDecl );
				}
		
    stringBuffer.append(TEXT_11);
    stringBuffer.append( cpt++ );
    stringBuffer.append(TEXT_12);
    stringBuffer.append( consumeDataBean.getComment() );
    stringBuffer.append(TEXT_13);
    			
				if( interfaceNsUri != null ) { 
    stringBuffer.append( interfaceNsPrefix + ":" );
     } 
			
    stringBuffer.append( consumeDataBean.getInterfaceName() );
    stringBuffer.append(TEXT_14);
     
				if( !"".equals( consumeDataBean.getServiceName())) { 
    stringBuffer.append(TEXT_15);
     
					if( serviceNsUri != null ) { 
    stringBuffer.append( serviceNsPrefix + ":" );
     } 
			
    stringBuffer.append( consumeDataBean.getServiceName() );
    stringBuffer.append(TEXT_16);
     } 
    
				
			if( ! JbiNameFormatter.PETALS_AUTO_GENERATE_ENDPOINT.equals( consumeDataBean.getEndpointName())
					&& !"".equals( consumeDataBean.getEndpointName())) { 
    stringBuffer.append(TEXT_17);
    stringBuffer.append( consumeDataBean.getEndpointName() );
    stringBuffer.append(TEXT_18);
     } 
    
			
			for( String nsDecl : nsDeclarations ) {
				
    stringBuffer.append( "\n\t\t\t" + nsDecl );
    
			} 
			
    stringBuffer.append(TEXT_19);
    stringBuffer.append( consumeDataBean.getInvokedOperation().getNamespaceURI()  );
    stringBuffer.append(TEXT_20);
    stringBuffer.append( consumeDataBean.getInvokedOperation().getLocalPart() );
    stringBuffer.append(TEXT_21);
    stringBuffer.append( consumeDataBean.getMep() );
    stringBuffer.append(TEXT_22);
     
			}
		} 
    stringBuffer.append(TEXT_23);
    stringBuffer.append(TEXT_24);
    return stringBuffer.toString();
  }
}