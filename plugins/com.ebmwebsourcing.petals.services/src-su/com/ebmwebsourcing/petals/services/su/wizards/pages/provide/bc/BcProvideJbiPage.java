/****************************************************************************
 *
 * Copyright (c) 2008-2011, EBM WebSourcing
 *
 * This source code is available under agreement available at
 * http://www.petalslink.com/legal/licenses/petals-studio
 *
 * You should have received a copy of the agreement along with this program.
 * If not, write to EBM WebSourcing (4, rue Amelie - 31200 Toulouse, France).
 *
 *****************************************************************************/

package com.ebmwebsourcing.petals.services.su.wizards.pages.provide.bc;

import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.jface.dialogs.IDialogSettings;
import org.eclipse.jface.fieldassist.ControlDecoration;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.FocusAdapter;
import org.eclipse.swt.events.FocusEvent;
import org.eclipse.swt.events.KeyAdapter;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.ISharedImages;
import org.eclipse.ui.PlatformUI;

import com.ebmwebsourcing.commons.jbi.internal.provisional.utils.JbiNameFormatter;
import com.ebmwebsourcing.petals.common.internal.provisional.preferences.PreferencesManager;
import com.ebmwebsourcing.petals.common.internal.provisional.utils.StringUtils;
import com.ebmwebsourcing.petals.common.internal.provisional.utils.WsdlParser;
import com.ebmwebsourcing.petals.common.internal.provisional.utils.WsdlParser.JbiBasicBean;
import com.ebmwebsourcing.petals.services.PetalsServicesPlugin;
import com.ebmwebsourcing.petals.services.su.Messages;
import com.ebmwebsourcing.petals.services.su.wizards.SettingConstants;
import com.ebmwebsourcing.petals.services.su.wizards.generation.EclipseSuBean;
import com.ebmwebsourcing.petals.services.su.wizards.pages.AbstractJbiPage;

/**
 * JBI page for Binding Components in "provide".
 * @author Vincent Zurczak - EBM WebSourcing
 */
public class BcProvideJbiPage extends AbstractJbiPage {


	/** Paths of the WSDL. */
	protected String wsdlUrl, lastWsdlUrl = ""; //$NON-NLS-1$

	/** The widget for the WSDL URL. */
	protected Text wsdlUrlText;

	/** The button for the WSDL browser. */
	protected Button wsdlBrowserButton;

	private IStatus wsdlParsingResult;
	private ControlDecoration wsdlTextDecoration;



	/**
	 * Constructor.
	 * @param suType the SU type.
	 * @param suTypeVersion the version for this SU type.
	 */
	public BcProvideJbiPage( String suType, String suTypeVersion ) {
		super( suType, suTypeVersion );
		setDescription( "Define the JBI properties of the service to import." );
	}


	/*
	 * (non-Javadoc)
	 * @see com.ebmwebsourcing.petals.tools.eclipse.su.main.pages.AbstractJbiPage
	 * #createCustomControls(org.eclipse.swt.widgets.Composite)
	 */
	@Override
	public void createCustomControls( Composite container ) {

		addWsdlBrowser( container );
		createCommonControls( container, 20 );
		createAutoGenerationWidget( container );
		reloadDataFromConfiguration();
	}


	/**
	 * The widgets to indicate to the user that he can choose "auto-generation" for the SU end-point.
	 * @param container
	 */
	private void createAutoGenerationWidget( Composite container ) {

		new Label( container, SWT.NONE ).setText( "" ); //$NON-NLS-1$

		// Add the button asking if we should generate the end-point.
		Button endpointAutoGenerated = new Button( container, SWT.CHECK );
		endpointAutoGenerated.setText( Messages.ProvideJbiPage_8 );
		endpointAutoGenerated.setToolTipText( Messages.ProvideJbiPage_9 );

		IDialogSettings settings = getWizard().getDialogSettings();
		if( settings.getBoolean( SettingConstants.EDPT_NAME_GEN_ACTIVATE )) {
			endpointAutoGenerated.setSelection( settings.getBoolean( SettingConstants.EDPT_NAME_GEN_VALUE ));

			endpointAutoGenerated.addSelectionListener( new SelectionAdapter() {
				@Override
				public void widgetSelected(SelectionEvent e) {

					Button button = (Button) e.widget;
					if( button.getSelection()) {	// button is checked
						BcProvideJbiPage.this.endpointNameText.setEnabled( false );
						BcProvideJbiPage.this.endpointName = JbiNameFormatter.PETALS_AUTO_GENERATE_ENDPOINT;
					}
					else {	// button is not checked
						BcProvideJbiPage.this.endpointNameText.setEnabled( true );
						BcProvideJbiPage.this.endpointName = BcProvideJbiPage.this.endpointNameText.getText();
					}
					validate();
				}
			});
		}
	}


	/**
	 * Add the WSDL browser in the page (case: looking for the WSDL on the hard drive).
	 * @param table
	 */
	private void addWsdlBrowser( final Composite table ) {

		IDialogSettings settings = getWizard().getDialogSettings();
		boolean _showWsdl = settings.getBoolean( SettingConstants.WSDL_SHOW );
		if( ! _showWsdl )
			return;

		Label wsdlLabel = new Label( table, SWT.NONE );
		wsdlLabel.setText( Messages.ProvideJbiPage_13 );

		Composite browser = new Composite( table, SWT.NONE );
		browser.setLayoutData( new GridData( GridData.FILL_HORIZONTAL ));
		GridLayout layout = new GridLayout( 2, false );
		layout.marginWidth = layout.marginHeight = 0;
		browser.setLayout( layout );

		this.wsdlUrlText = new Text( browser, SWT.SINGLE | SWT.BORDER );
		this.wsdlUrlText.setLayoutData( new GridData( GridData.FILL_HORIZONTAL ));
		this.wsdlUrlText.addModifyListener( new ModifyListener() {
			public void modifyText(ModifyEvent e) {
				validate ();
			}
		});

		// Add a decoration on the text.
		this.wsdlTextDecoration = new ControlDecoration( this.wsdlUrlText, SWT.LEFT | SWT.BOTTOM );
		this.wsdlUrlText.addKeyListener( new KeyAdapter () {
			@Override
			public void keyPressed( KeyEvent e ) {
				if( e.character == SWT.CR
							|| e.character == SWT.LF
							|| e.character == SWT.TAB
							|| e.keyCode == SWT.KEYPAD_CR ) {

					BcProvideJbiPage.this.lastWsdlUrl = null; // allow requests to parse - once again - the WSDL
					runWsdlParsing();
					validate();
				}
			}
		});

		// Add a browsing button.
		this.wsdlBrowserButton = new Button( browser, SWT.PUSH );
		this.wsdlBrowserButton.setText( Messages.ProvideJbiPage_14 );
		String tooltip = settings.get( SettingConstants.WSDL_TOOLTIP_VALUE );
		if( tooltip != null ) {
			this.wsdlUrlText.setToolTipText( tooltip );
			wsdlLabel.setToolTipText( tooltip );
			this.wsdlBrowserButton.setToolTipText( tooltip );
		}

		this.wsdlBrowserButton.addSelectionListener( new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {

				FileDialog dlg = new FileDialog( table.getShell(), SWT.SINGLE );
				dlg.setText( Messages.ProvideJbiPage_15 );
				dlg.setFilterNames( new String[] { Messages.ProvideJbiPage_16 });
				dlg.setFilterExtensions( new String[] { "*.wsdl" }); //$NON-NLS-1$

				String path = PreferencesManager.getSavedLocation();
				if( path.trim().length() > 0 )
					dlg.setFilterPath( path );

				String fn = dlg.open();
				if (fn == null)
					return;

				try {
					path = dlg.getFilterPath();
					PreferencesManager.setSavedLocation( path );

					String filePath = new File( fn ).toURI().toURL().toString();
					BcProvideJbiPage.this.wsdlUrlText.setText( filePath );
					BcProvideJbiPage.this.wsdlUrlText.setSelection( BcProvideJbiPage.this.wsdlUrlText.getText().length());

					BcProvideJbiPage.this.lastWsdlUrl = null; // allow requests to parse - once again - the WSDL
					runWsdlParsing();
					validate();

				} catch( MalformedURLException e1 ) {
					// e1.printStackTrace();
				}
			}
		});

		// Add a focus listener: when the text loses the focus, try to parse the WSDL.
		this.wsdlUrlText.addFocusListener( new FocusAdapter() {
			@Override
			public void focusLost( FocusEvent e ) {
				runWsdlParsing();
			}
		});
	}


	/**
	 * Parse the WSDL and update control decorations depending on the result of this parsing.
	 */
	private void runWsdlParsing() {

		String wsdlUrl = this.wsdlUrlText.getText();
		if( ! wsdlUrl.equals( this.lastWsdlUrl )) {

			boolean validWsdl = false;
			if( wsdlUrl.length() == 0 ) {
				updateWsdlParsingMessage( this.wsdlTextDecoration, IStatus.OK, Messages.ProvideJbiPage_23 );

			} else {
				this.lastWsdlUrl = wsdlUrl;
				runParsing( wsdlUrl );
				updateWsdlParsingMessage(
							this.wsdlTextDecoration,
							this.wsdlParsingResult.getSeverity(),
							this.wsdlParsingResult.getMessage());

				validWsdl = this.wsdlParsingResult.isOK();
				updateViewers();

				this.serviceNameCombo.getCCombo().setEditable( ! validWsdl );
				this.serviceNamespaceCombo.getCCombo().setEditable( ! validWsdl );
				this.interfaceNameCombo.getCCombo().setEditable( ! validWsdl );
				this.interfaceNamespaceCombo.getCCombo().setEditable( ! validWsdl );
			}
		}
	}


	/**
	 * Runs the WSDL parsing.
	 * <p>
	 * This operation updates the state of {@link #wsdlParsingResult}.
	 * Methods that call this method should get the result of the operation
	 * by checking this field. The {@link #wsdlParsingResult} is never null.
	 * </p>
	 *
	 * @param wsdlUrl the URL of the WSDL to parse
	 */
	private void runParsing( final String wsdlUrl ) {

		IRunnableWithProgress wsdlParsingOperation = new IRunnableWithProgress() {
			public void run(IProgressMonitor monitor) throws InvocationTargetException {

				monitor.beginTask( Messages.ProvideJbiPage_24, 2 );
				monitor.worked( 1 );
				try {
					List<JbiBasicBean> newWsdlBeans = WsdlParser.getInstance().parse( wsdlUrl );
					if( newWsdlBeans == null )
						newWsdlBeans = new ArrayList<JbiBasicBean> ();

					if( newWsdlBeans.isEmpty()) {
						BcProvideJbiPage.this.wsdlParsingResult = new Status(
									IStatus.ERROR, PetalsServicesPlugin.PLUGIN_ID, Messages.ProvideJbiPage_25 );
					}
					else {
						BcProvideJbiPage.this.wsdlBeans.clear();
						BcProvideJbiPage.this.wsdlBeans.addAll( newWsdlBeans );
						monitor.worked( 1 );
						BcProvideJbiPage.this.wsdlParsingResult = new Status(
									IStatus.OK, PetalsServicesPlugin.PLUGIN_ID, Messages.ProvideJbiPage_26 );
					}

				} catch( IllegalArgumentException e1 ) {
					BcProvideJbiPage.this.wsdlParsingResult = new Status(
								IStatus.WARNING, PetalsServicesPlugin.PLUGIN_ID, Messages.ProvideJbiPage_27 );
				} finally {
					monitor.done();
				}
			}
		};

		try {
			getContainer().run( true, false, wsdlParsingOperation );

		} catch( Exception e ) {
			PetalsServicesPlugin.log( e, IStatus.ERROR );
			BcProvideJbiPage.this.wsdlParsingResult = new Status(
						IStatus.ERROR,
						PetalsServicesPlugin.PLUGIN_ID,
			"This WSDL could not be parsed." );
		}
	}


	/**
	 * Update the error message related to the WSDL parsing and the WSDL widget decoration.
	 * @param controlDecoration the control decoration used to decorate the WSDL widget.
	 * @param status the result of the parsing.
	 * @param message the message to display as <i>hover</i> for the decoration.
	 */
	private void updateWsdlParsingMessage( ControlDecoration controlDecoration, int status, String message ) {

		if( status == IStatus.WARNING ) {
			controlDecoration.setDescriptionText( message );
			Image warningImage = PlatformUI.getWorkbench().getSharedImages().getImage( ISharedImages.IMG_OBJS_WARN_TSK );
			controlDecoration.setImage( warningImage );
			controlDecoration.show();
		}
		else if( status == IStatus.ERROR ) {
			controlDecoration.setDescriptionText( message );
			Image errorImage = PlatformUI.getWorkbench().getSharedImages().getImage( ISharedImages.IMG_OBJS_ERROR_TSK );
			controlDecoration.setImage( errorImage );
			controlDecoration.show();
		}
		else {
			controlDecoration.setDescriptionText( message );
			controlDecoration.hide();
		}
	}


	/*
	 * (non-Javadoc)
	 * @see com.ebmwebsourcing.petals.tools.eclipse.su.main.pages.AbstractSuPage#dialogChanged()
	 */
	@Override
	public boolean validate() {
		setMessage( null );

		// WSDL path
		if( this.wsdlUrlText != null
					&& this.wsdlUrlText.getText().length() != 0 ) {
			try {
				new URL( this.wsdlUrlText.getText());

			} catch( MalformedURLException e ) {
				updateStatus( Messages.ProvideJbiPage_31 );
				return false;
			}
		}

		// Interface name
		IDialogSettings settings = getWizard().getDialogSettings();
		if( settings.getBoolean( SettingConstants.ITF_VALIDATE )) {
			if( this.interfaceNamespaceCombo.getCCombo().getText().trim().length() == 0 ) {
				updateStatus( "You have to provide the interface namepsace." );
				return false;
			}

			try {
				new URI( this.interfaceNamespaceCombo.getCCombo().getText());
			} catch( URISyntaxException e ) {
				updateStatus( "The interface namespace is not a valid URI." );
				return false;
			}

			if( this.interfaceNameCombo.getCCombo().getText().trim().length() == 0 ) {
				updateStatus( Messages.ConsumeJbiPage_9 );
				return false;
			}
		}

		// Service name
		if( settings.getBoolean( SettingConstants.SRV_VALIDATE )) {
			if( this.serviceNamespaceCombo.getCCombo().getText().trim().length() == 0 ) {
				updateStatus( "You have to provide the service namepsace." );
				return false;
			}

			try {
				new URI( this.serviceNamespaceCombo.getCCombo().getText());
			} catch( URISyntaxException e ) {
				updateStatus( "The service namespace is not a valid URI." );
				return false;
			}

			if( this.serviceNameCombo.getCCombo().getText().trim().length() == 0 ) {
				updateStatus( Messages.ProvideJbiPage_35 );
				return false;
			}
		}

		// End-point name
		if( settings.getBoolean( SettingConstants.EDPT_VALIDATE )
					&& this.endpointNameText.isEnabled()
					&& this.endpointNameText.getText().length() == 0 ) {
			updateStatus( Messages.ProvideJbiPage_37 );
			return false;
		}

		// Update data
		updateStatus( null );
		this.interfaceName = this.interfaceNameCombo.getCCombo().getText();
		this.interfaceNamespace = this.interfaceNamespaceCombo.getCCombo().getText();
		this.serviceName = this.serviceNameCombo.getCCombo().getText();
		this.serviceNamespace = this.serviceNamespaceCombo.getCCombo().getText();
		if( this.endpointName == null || !this.endpointName.equals( JbiNameFormatter.PETALS_AUTO_GENERATE_ENDPOINT ))
			this.endpointName = this.endpointNameText.getText();


		// WSDL path should be registered only when a WSDL is required.
		if( this.wsdlUrlText != null )
			this.wsdlUrl = this.wsdlUrlText.getText();
		else
			this.wsdlUrl = null;

		// Keep values - e.g. for the project page
		settings.put( SettingConstants.SRV_NAME_VALUE, this.serviceName );
		settings.put( SettingConstants.SRV_NS_VALUE, this.serviceNamespace );
		settings.put( SettingConstants.ITF_NAME_VALUE, this.interfaceName );
		settings.put( SettingConstants.ITF_NS_VALUE, this.interfaceNamespace );
		settings.put( SettingConstants.EDPT_NAME_VALUE, this.endpointName );
		settings.put( SettingConstants.PROVIDED_WSDL_URI, this.wsdlUrl );

		// - Register the SOAP address in the wizard configuration (for the SOAP plug-in)
		if( this.selectedBean != null ) {
			settings.put( SettingConstants.SOAP_ADDRESS_VALUE, this.selectedBean.getSoapAddress());
			settings.put( SettingConstants.SOAP_VERSION_VALUE, this.selectedBean.getSoapVersion().toString());
		}
		//

		return true;
	}


	/*
	 * (non-Javadoc)
	 * @see com.ebmwebsourcing.petals.tools.eclipse.su.main.pages.AbstractSuPage
	 * #setHelpContextId(org.eclipse.swt.widgets.Composite)
	 */
	@Override
	protected void setHelpContextId(Composite container) {
		PlatformUI.getWorkbench().getHelpSystem().setHelp(
					container,
					PetalsServicesPlugin.PLUGIN_ID + ".provideJbiPageId" ); //$NON-NLS-1$
	}


	/*
	 * (non-Javadoc)
	 * @see com.ebmwebsourcing.petals.tools.eclipse.su.main.pages.AbstractJbiPage
	 * #fillInData(com.ebmwebsourcing.petals.tools.eclipse.su.main.wizards.generation.EclipseSuBean)
	 */
	@Override
	public void fillInData( EclipseSuBean suBean ) {

		super.fillInData( suBean );
		suBean.setConsume( false );
		suBean.setWsdlUrl( this.wsdlUrl );

		if( StringUtils.isEmpty( this.wsdlUrl )
					&& StringUtils.isEmpty( suBean.getCreatedWsdlMarkupValue())) {

			suBean.setCreatedWsdlMarkupValue(
						getWizard().getDialogSettings().get( SettingConstants.WSDL_HIDDEN_VALUE ));
		}
	}


	/*
	 * (non-Javadoc)
	 * @see com.ebmwebsourcing.petals.tools.eclipse.su.main.pages.AbstractSuPage
	 * #reloadDataFromConfiguration()
	 */
	@Override
	public void reloadDataFromConfiguration() {

		if( this.interfaceNameCombo == null )
			return;

		IDialogSettings settings = getWizard().getDialogSettings();
		if( this.wsdlUrlText != null ) {
			boolean _activateWsdl = settings.getBoolean( SettingConstants.WSDL_ACTIVATE );
			this.wsdlUrlText.setEnabled( _activateWsdl );
			this.wsdlBrowserButton.setEnabled( _activateWsdl );

			this.wsdlUrl = settings.get( SettingConstants.PROVIDED_WSDL_URI );
			if( this.wsdlUrl == null )
				this.wsdlUrl = "";

			this.wsdlUrlText.setText( this.wsdlUrl );
			if( this.wsdlUrl.trim().length() > 0 )
				runWsdlParsing();
		}

		super.reloadDataFromConfiguration();
		boolean isComplete = validate();
		if( ! isComplete )
			setErrorMessage( null );
		setPageComplete( isComplete );
	}
}
