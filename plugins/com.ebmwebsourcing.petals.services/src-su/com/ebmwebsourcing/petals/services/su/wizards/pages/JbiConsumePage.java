/****************************************************************************
 *
 * Copyright (c) 2008-2011, EBM WebSourcing
 *
 * This source code is available under agreement available at
 * http://www.petalslink.com/legal/licenses/petals-studio
 *
 * You should have received a copy of the agreement along with this program.
 * If not, write to EBM WebSourcing (4, rue Amelie - 31200 Toulouse, France).
 *
 *****************************************************************************/

package com.ebmwebsourcing.petals.services.su.wizards.pages;

import java.util.Map;

import javax.xml.namespace.QName;

import org.eclipse.core.runtime.IStatus;
import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.jface.dialogs.IDialogSettings;
import org.eclipse.jface.dialogs.IMessageProvider;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.window.Window;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.graphics.FontData;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.layout.RowLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Link;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.dialogs.PreferencesUtil;
import org.eclipse.ui.plugin.AbstractUIPlugin;

import com.ebmwebsourcing.petals.common.generation.Mep;
import com.ebmwebsourcing.petals.common.internal.provisional.swt.QNameText;
import com.ebmwebsourcing.petals.common.internal.provisional.ui.FixedShellTooltip;
import com.ebmwebsourcing.petals.common.internal.provisional.utils.PetalsConstants;
import com.ebmwebsourcing.petals.common.internal.provisional.utils.PlatformUtils;
import com.ebmwebsourcing.petals.common.internal.provisional.utils.StringUtils;
import com.ebmwebsourcing.petals.common.internal.provisional.utils.SwtFactory;
import com.ebmwebsourcing.petals.services.PetalsServicesPlugin;
import com.ebmwebsourcing.petals.services.explorer.model.EndpointBean;
import com.ebmwebsourcing.petals.services.su.extensions.SuWizardSettings;
import com.ebmwebsourcing.petals.services.utils.ConsumeUtils;
import com.sun.java.xml.ns.jbi.AbstractEndpoint;

/**
 * JBI page for Binding Components in "consume".
 * @author Vincent Zurczak - EBM WebSourcing
 */
public class JbiConsumePage extends JbiAbstractPage {

	private Button invokeByServiceButton, invokeByEndpointButton;
	private Image tooltipImage;
	private Font boldFont;

	private EndpointBean consumedBean;
	private FixedShellTooltip helpTooltip;
	private boolean tooltipWasVisible = false;
	private boolean invokeByServiceName = false;
	private boolean invokeByEndpointName = false;


	/*
	 * (non-Javadoc)
	 * @see org.eclipse.jface.dialogs.DialogPage
	 * #getDescription()
	 */
	@Override
	public String getDescription() {
		return "Specify the invocation properties of a Petals service.";
	}


	/*
	 * (non-Javadoc)
	 * @see org.eclipse.jface.dialogs.DialogPage#dispose()
	 */
	@Override
	public void dispose() {

		if( this.helpTooltip != null )
			this.helpTooltip.dispose();

		if( this.tooltipImage != null && ! this.tooltipImage.isDisposed())
			this.tooltipImage.dispose();

		if( this.boldFont != null && ! this.boldFont.isDisposed())
			this.boldFont.dispose();

		super.dispose();
	}


	/*
	 * (non-Javadoc)
	 * @see com.ebmwebsourcing.petals.tools.eclipse.su.main.pages.AbstractJbiPage
	 * #createCustomControls(org.eclipse.swt.widgets.Composite)
	 */
	@Override
	public void createCustomControls( Composite container ) {

		// Usual controls
		addWorkspaceBrowser( container );
		createCommonControls( container, 20 );
		createCheckboxes( container );


		// Disable invocation by end-point for auto-generated end-points
		this.edptText.addModifyListener( new ModifyListener() {
			@Override
			public void modifyText( ModifyEvent e ) {

				String autogenValue = getWizardHandler().getComponentVersionDescription().getAutoGeneratedEndpointValue();
				boolean autogen = autogenValue.equals( JbiConsumePage.this.edptText.getText().trim());
				if( autogen ) {
					JbiConsumePage.this.invokeByEndpointName = false;
					JbiConsumePage.this.invokeByEndpointButton.setSelection( false );
				}
			}
		});


		// Add a tool tip to display in case of problem
		this.helpTooltip = new FixedShellTooltip( getShell(), true, 90 ) {
			@Override
			public void populateTooltip( Composite parent ) {

				GridLayout layout = new GridLayout();
				layout.verticalSpacing = 2;
				parent.setLayout( layout );
				parent.setLayoutData( new GridData( GridData.FILL_BOTH ));
				parent.setBackground( getShell().getDisplay().getSystemColor( SWT.COLOR_LIST_BACKGROUND ));

				try {
					ImageDescriptor desc = AbstractUIPlugin.imageDescriptorFromPlugin(
							PetalsConstants.PETALS_COMMON_PLUGIN_ID, "icons/petals/teaching.png" );

					if( desc != null )
						JbiConsumePage.this.tooltipImage = desc.createImage();

					parent.setBackgroundMode( SWT.INHERIT_DEFAULT );
					Label imgLabel = new Label( parent, SWT.NONE );
					imgLabel.setImage( JbiConsumePage.this.tooltipImage );
					imgLabel.setLayoutData( new GridData( SWT.CENTER, SWT.DEFAULT, true, true ));

				} catch( Exception e ) {
					PetalsServicesPlugin.log( e, IStatus.WARNING );
				}

				FontData[] fd = PlatformUtils.getModifiedFontData( getFont().getFontData(), SWT.BOLD );
				JbiConsumePage.this.boldFont = new Font( getShell().getDisplay(), fd );
				Label titleLabel = new Label( parent, SWT.NONE );
				titleLabel.setFont( JbiConsumePage.this.boldFont );
				GridData layoutData = new GridData( SWT.CENTER, SWT.DEFAULT, true, true );
				layoutData.verticalIndent = 5;
				titleLabel.setLayoutData( layoutData );
				titleLabel.setText( "What does this error mean?" );

				StringBuilder sb = new StringBuilder();
				sb.append( "The " + getWizardHandler().getComponentVersionDescription().getComponentAlias() + " component can only invoke (consume) services with the " );
				// TODO: fix this
				// sb.append( getWizardHandler().getComponentVersionDescription(). + " MEP.\n" );
				sb.append( "But the service you chose has no (predefined) operation that supports this invocation MEP." );

				Label l = new Label( parent, SWT.WRAP );
				l.setText( sb.toString());
				layoutData = new GridData();
				layoutData.verticalIndent = 8;
				l.setLayoutData( layoutData );

				RowLayout rowLayout = new RowLayout( SWT.HORIZONTAL );
				rowLayout.marginLeft = 0;
				rowLayout.marginTop = 8;
				rowLayout.marginRight = 0;
				rowLayout.marginBottom = 0;
				rowLayout.spacing = 0;

				Composite rowComposite = new Composite( parent, SWT.NONE );
				rowComposite.setLayout( rowLayout );
				rowComposite.setLayoutData( new GridData( SWT.CENTER, SWT.DEFAULT, true, true ));

				new Label( rowComposite, SWT.NONE ).setText( "Please, note that there is an " );
				Link link = new Link( rowComposite, SWT.WRAP | SWT.NO_FOCUS );
				link.setText( "<A>option in the Petals preferences</A>" );
				new Label( rowComposite, SWT.WRAP ).setText( "." );
				new Label( rowComposite, SWT.WRAP ).setText( " to not display incompatible services." );

				link.addSelectionListener( new SelectionListener() {

					@Override
					public void widgetSelected( SelectionEvent e ) {
						widgetDefaultSelected( e );
					}

					@Override
					public void widgetDefaultSelected( SelectionEvent e ) {
						try {
							Dialog dlg = PreferencesUtil.createPreferenceDialogOn(
									new Shell(),
									"com.ebmwebsourcing.petals.services.prefs.services",
									null, null );

							if( dlg.open() == Window.OK )
								validate();

						} catch( Exception e1 ) {
							PetalsServicesPlugin.log( e1, IStatus.ERROR );
						}
					}
				});
			}
		};

		this.helpTooltip.hide();
	}


	/**
	 * The widgets to define the invocation properties.
	 * @param container
	 */
	private void createCheckboxes( Composite container ) {

		// Add the button asking if we should generate the end-point.
		SwtFactory.createLabel( container, "", null ); //$NON-NLS-1$
		this.invokeByServiceButton = SwtFactory.createCheckBoxButton( container, "Invoke by service name", "Use this service name in the selection of a service provider", this.invokeByServiceName );

		SwtFactory.createLabel( container, "", null ); //$NON-NLS-1$
		this.invokeByEndpointButton = SwtFactory.createCheckBoxButton( container, "Invoke by end-point name", "Use this end-point name in the selection of a service provider", this.invokeByEndpointName );
		this.invokeByEndpointButton.setEnabled( this.invokeByServiceName );

		// Add the MEP and operation widgets
		SwtFactory.createLabel( container, "Interface Name:", null ); //$NON-NLS-1$
		QNameText qt = new QNameText( container );
		qt.setLayoutData( new GridData( GridData.FILL_HORIZONTAL ));


		// Listeners
		this.invokeByServiceButton.addSelectionListener( new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {

				JbiConsumePage.this.invokeByServiceName = ((Button) e.widget).getSelection();
				JbiConsumePage.this.srvQText.setEnabled( JbiConsumePage.this.invokeByServiceName );
				if( ! JbiConsumePage.this.invokeByServiceName ) {
					JbiConsumePage.this.invokeByEndpointName = false;
					JbiConsumePage.this.edptText.setEnabled( false );

				} else {
					JbiConsumePage.this.invokeByEndpointButton.notifyListeners( SWT.Selection, new Event());
				}

				JbiConsumePage.this.invokeByEndpointButton.setEnabled( JbiConsumePage.this.invokeByServiceName );
				validate();
			}
		});

		this.invokeByEndpointButton.addSelectionListener( new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {

				JbiConsumePage.this.invokeByEndpointName = ((Button) e.widget).getSelection();
				JbiConsumePage.this.edptText.setEnabled( JbiConsumePage.this.invokeByEndpointName );
				validate();
			}
		});

		this.invokeByServiceButton.notifyListeners( SWT.Selection, new Event());
		this.invokeByEndpointButton.notifyListeners( SWT.Selection, new Event());
	}


	/**
	 * Adds a browser to look for "provide" end-points in the workspace.
	 * @param table
	 */
	private void addWorkspaceBrowser( final Composite table ) {

		Composite container = SwtFactory.createComposite( table );
		SwtFactory.applyNewGridLayout( container, 2, false, 5, 0, 10, 0 );
		SwtFactory.applyHorizontalGridData( container, 2 );
		new Label( container, SWT.NONE ).setImage( this.tipImage );


		// Add an hyper link
		Link selectLink = new Link( container, SWT.NONE );
		selectLink.setText( "<A>Select a service</A> from the Petals Services view to fill in these fields automatically." );
		selectLink.setToolTipText( "Select an end-point to consume among the currently referenced end-points" );
		selectLink.addSelectionListener( new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {

				// Is there a filtering MEP?
				// FIXME
				String mepAsString = ""; //getDialogSettings().get( SuWizardSettings.SUPPORTED_MEP );
				Mep filterMep = Mep.whichMep( mepAsString );

				// Display the selection dialog
				EndpointBean bean = ConsumeUtils.selectEndpointToConsume( table, filterMep );
				JbiConsumePage.this.consumedBean = bean;
				if( bean != null ) {
					JbiConsumePage.this.itfQText.setValue( JbiConsumePage.this.consumedBean.getInterfaceName());
					JbiConsumePage.this.srvQText.setValue( JbiConsumePage.this.consumedBean.getServiceName());
					JbiConsumePage.this.edptText.setText( JbiConsumePage.this.consumedBean.getEndpointName());
				}
			}
		});
	}


	/*
	 * (non-Javadoc)
	 * @see com.ebmwebsourcing.petals.tools.eclipse.su.main.pages.AbstractSuPage
	 * #validate()
	 */
	@Override
	public boolean validate() {

		setMessage( null );
		setMessage( null, IMessageProvider.WARNING );

		// Interface name
		AbstractEndpoint ae = getFirstProvideOrConsume();
		IDialogSettings settings = getWizard().getDialogSettings();
		if( settings.getBoolean( SuWizardSettings.ITF_VALIDATE )
				&& ae.getInterfaceName() == null ) {
				updateStatus( "You have to provide the interface name." );
				return false;
		}

		// Service name
		if( this.invokeByServiceName && ae.getServiceName() == null ) {
			updateStatus( "You have to provide the service name" );
			return false;
		}

		// End-point name
		if( this.invokeByEndpointName && StringUtils.isEmpty( ae.getEndpointName())) {
			updateStatus( "You have to define the end-point name." );
			return false;
		}


		// Update data.
		updateStatus( null );

		// Make sure this service can be invoked (MEP)
		// Do not rely on the consumed bean, values may have been changed manually
		// FIXME:
		String mepAsString = ""; //getDialogSettings().get( SuWizardSettings.SUPPORTED_MEP );
		Mep filterMep = Mep.whichMep( mepAsString );
		Map<QName,Mep> ops = ConsumeUtils.getValidOperationsForConsume( ae.getInterfaceName(), ae.getServiceName(), ae.getEndpointName());
		if( filterMep != Mep.UNKNOWN ) {
			if( ! ops.isEmpty()) {
				if( ! ConsumeUtils.supportsMep( ops, filterMep )) {
					setMessage( "This service cannot be invoked with the " + mepAsString + " MEP.", IMessageProvider.ERROR );
					this.helpTooltip.show();
					this.tooltipWasVisible = true;

				} else {
					this.helpTooltip.hide();
					this.tooltipWasVisible = false;
				}

			} else {
				setMessage( "This service may not be invocable with the " + mepAsString + " MEP.", IMessageProvider.WARNING );
				this.helpTooltip.show();
				this.tooltipWasVisible = true;
			}
		}

		if( this.consumedBean != null ) {
			settings.put( SuWizardSettings.CONSUMED_COMPONENT_NAME, this.consumedBean.getComponentName());
			settings.put( SuWizardSettings.CONSUMED_WSDL_URI, String.valueOf( this.consumedBean.getWsdlUri()));
		} else {
			settings.put( SuWizardSettings.CONSUMED_COMPONENT_NAME, "" );
			settings.put( SuWizardSettings.CONSUMED_WSDL_URI, (String) null );
		}

		return true;
	}


	/*
	 * (non-Jsdoc)
	 * @see org.eclipse.jface.dialogs.DialogPage
	 * #setVisible(boolean)
	 */
	@Override
	public void setVisible( boolean visible ) {
		super.setVisible( visible );

		if( this.helpTooltip != null && this.tooltipWasVisible ) {
			if( visible )
				this.helpTooltip.show();
			else
				this.helpTooltip.hide();
		}
	}
}
